{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Documents\\\\GitHub\\\\cs203\\\\frontend\\\\src\\\\screens\\\\Login.js\",\n  _s = $RefreshSig$();\n// src/components/Login.js\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport ErrorMessage from '../components/ErrorMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const navigate = useNavigate();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setErrorMessage('');\n    const userData = {\n      username: username,\n      password: password\n    };\n    try {\n      const response = await fetch('http://localhost:8080/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        if (response.status === 404) {\n          throw new Error(\"Login Failed. Try Again.\");\n        }\n        throw new Error(errorMessage);\n      }\n      // Get User Role\n      const responseJson = await response.json();\n      const role = responseJson.userRole;\n\n      // Encode the credentials for Basic Authentication\n      const credentials = btoa(`${username}:${password}`);\n\n      // After successful login, fetch tournaments\n      const tournamentsResponse = await fetch('http://localhost:8080/tournaments', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Basic ${credentials}`,\n          // If you have a token to include\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!tournamentsResponse.ok) {\n        throw new Error(\"Failed to fetch tournaments.\");\n      }\n\n      // Ensure the response is valid JSON\n      const tournamentsText = await tournamentsResponse.text(); // Read response as text first\n      const tournaments = tournamentsText ? JSON.parse(tournamentsText) : []; // Parse if not emptyxt();\n\n      // Navigate to tournaments page based on role\n      if (role.equals(\"ROLE_USER\")) {\n        navigate('/tournaments', {\n          state: {\n            role,\n            tournaments\n          }\n        });\n      }\n    } catch (error) {\n      setErrorMessage(error.message);\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n      message: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"username\",\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"username\",\n          value: username,\n          onChange: e => setUsername(e.target.value),\n          autoComplete: \"off\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"login-button\",\n        type: \"submit\",\n        value: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/signup\",\n        children: \"Signup Here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 40\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"8U378PBpQ7JiNpIRa9lTFGoSkAQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Link","useNavigate","ErrorMessage","jsxDEV","_jsxDEV","Login","_s","username","setUsername","password","setPassword","errorMessage","setErrorMessage","navigate","handleSubmit","e","preventDefault","userData","response","fetch","method","headers","body","JSON","stringify","ok","text","status","Error","responseJson","json","role","userRole","credentials","btoa","tournamentsResponse","tournamentsText","tournaments","parse","equals","state","error","message","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","autoComplete","required","to","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Documents/GitHub/cs203/frontend/src/screens/Login.js"],"sourcesContent":["// src/components/Login.js\r\nimport React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport ErrorMessage from '../components/ErrorMessage';\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setErrorMessage('');\r\n\r\n        const userData = {\r\n            username:username,\r\n            password:password,\r\n        };\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:8080/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(userData),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorMessage = await response.text();\r\n                if (response.status === 404) {\r\n                    throw new Error(\"Login Failed. Try Again.\")\r\n                }\r\n                throw new Error(errorMessage);\r\n            }\r\n            // Get User Role\r\n            const responseJson = await response.json();\r\n            const role = responseJson.userRole;\r\n\r\n            // Encode the credentials for Basic Authentication\r\n            const credentials = btoa(`${username}:${password}`);\r\n\r\n            // After successful login, fetch tournaments\r\n            const tournamentsResponse = await fetch('http://localhost:8080/tournaments', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': `Basic ${credentials}`, // If you have a token to include\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            if (!tournamentsResponse.ok) {\r\n                throw new Error(\"Failed to fetch tournaments.\");\r\n            }\r\n\r\n            // Ensure the response is valid JSON\r\n            const tournamentsText = await tournamentsResponse.text(); // Read response as text first\r\n            const tournaments = tournamentsText ? JSON.parse(tournamentsText) : []; // Parse if not emptyxt();\r\n            \r\n            // Navigate to tournaments page based on role\r\n            if (role.equals(\"ROLE_USER\")) {\r\n                navigate('/tournaments', { state: { role, tournaments } });\r\n            }\r\n            \r\n        } catch (error) {\r\n            setErrorMessage(error.message);\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <ErrorMessage message={errorMessage}></ErrorMessage>\r\n            <h1>Login</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"username\">Username:</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"username\"\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                        autoComplete=\"off\"\r\n                        required\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"password\">Password:</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        required\r\n                    />\r\n                </div>\r\n\r\n                <input className='login-button' type=\"submit\" value=\"Login\" />\r\n            </form>\r\n            <p>\r\n                Don't have an account? <Link to=\"/signup\">Signup Here</Link>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}